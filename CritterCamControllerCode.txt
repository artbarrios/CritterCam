/*
============================================================================
Critter Cam Controller
Art Barrios - 08-02-2012

Used to capture pictures of critters who are pilfering dog food from a bin.

Hardware Requirements:
- Momentary normally closed switch connected to dog food bin lid which opens
  when something opens the bin
- LED panel controllable by Arduino
- Solenoid controllable by Arduino
- 110V Solid State Relay controllable by Arduino
- Cell phone charger plugged into the solid state relay
- Android cell phone with camera with the charger plugged into it
- Artificial finger which when actuated by the solenoid touches the cell
  phone and takes a picture

When the momentary switch is detected open we will slowly turn on the LED 
panel lights so as not to startle the critters, activate the 
artificial finger solenoid and take several pictures of said critters thus
acquiring evidence of their nefarious behavior. 

The Android phone will timeout and go into sleep mode after some time even
when it is plugged into a charger. If the power to the charger is cycled
before the phone times out the sleep time is reset and the phone camera app
will stay ready to take a picture. The solid state AC relay will be used here.

For some reason when the phone is connected to the charger the sensitivity
of the touchscreen is lower and the artificial finger will not activate the
screen. For this reason we will turn the charger off while taking pictures.
============================================================================
*/

int SolenoidPin = 12; // controls the solenoid
int SwitchPin = 11; // monitors the momentary switch
int ReadValue = 0; // value read from momentary switch
int LEDPin = 10; // controls the LED panel
int IndicatorPin = 13; // helpful indicator of momentary switch status
int PowerPin = 9; // controls the solid state relay
int PicturesTaken = 0;  // 0=pictures not taken, 1=pictures have been taken
int LEDMinBrightness = 0; // minimum brightness for LEDs to help prevent startling critters
int CameraRefreshTime = 90;  // period of time in seconds to cycle power to the phone
int PictureCount = 5; // the number of pictures to take

void setup() {                

// setup pins
pinMode(PowerPin, OUTPUT);
pinMode(LEDPin, OUTPUT);
pinMode(IndicatorPin, OUTPUT);
pinMode(SolenoidPin, OUTPUT);
pinMode(SwitchPin, INPUT);

// initialize all pins 
digitalWrite(SwitchPin, LOW);
digitalWrite(PowerPin, HIGH);
digitalWrite(IndicatorPin, LOW);
digitalWrite(SolenoidPin, LOW);

// set the LED to minimum brightness
analogWrite(LEDPin, LEDMinBrightness);

} // void setup()

void loop() {

  // read the value of the momentary switch
  ReadValue = digitalRead(SwitchPin);

  // check the status of the momentary switch
  if (ReadValue == HIGH) {
    // the bin is open
    // check if the pictures have not been taken
    if (PicturesTaken == 0) {
    // the switch is on and the pictures have not been taken so take the pictures
    // indicate the switch is on with the indicator LED
    digitalWrite(IndicatorPin, HIGH);
    // turn the power to the camera off so the artificial finger will work 
    digitalWrite(PowerPin, LOW);
    // turn on LEDs for some light gradually to prevent startling the critter 
    for (int i=0; i <= 255; i++) {
      analogWrite(LEDPin, i);
      delay(5);
      } // for (int i=0; i <= 255; i++)
    // turn LEDs on max brightness 
    digitalWrite(LEDPin, HIGH);
    // now take the pictures
    for (int i=1; i <= PictureCount; i++) {
      // press the shutter button with the solenoid
      digitalWrite(SolenoidPin, HIGH);
      // wait for the camera to complete taking the picture
      delay (200);
      // release the shuter button
      digitalWrite(SolenoidPin, LOW);
      // wait for the camera to reset for the next picture
      delay(2000);
      };
    // we are finished taking all the pictures we want to take
    // set PicturesTaken to 1
    PicturesTaken = 1; 
    // turn the LEDs off
    digitalWrite(LEDPin, LOW);
    // turn the charger power to the camera back on  
    digitalWrite(PowerPin, HIGH);
    }; // if (PicturesTaken == 0)
  } // if (ReadValue == HIGH)
  else {
    // the bin is closed
    // indicate the switch is off with the onboard LED
    digitalWrite(IndicatorPin, LOW);
    // reset PicturesTaken
    PicturesTaken = 0;
    // turn the LED to minimum brightness
    analogWrite(LEDPin, LEDMinBrightness);
    // cycle the charger power to keep the camera from timing out
    digitalWrite(PowerPin, LOW);
    // wait for power to completely shut down
    delay(2000);
    // turn the power to the camera back on  
    digitalWrite(PowerPin, HIGH);
    // wait the period of time necessary before the camera times out
    for (int i=0; i <= (CameraRefreshTime); i++) {
      // delay for 1 second
      delay(1000);
      // check if the momentary switch has been activated
      ReadValue = digitalRead(SwitchPin);
      if (ReadValue == HIGH) {
        // the switch is on so break out of this loop
        i = 1000;
        }; // if (ReadValue == HIGH)
      }; // for (int i=0; i <= (CameraRefreshTime); i++)
    }; // if (ReadValue == HIGH)

  }; // void loop

